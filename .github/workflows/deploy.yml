name: Deploy PeruJUG Site to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Generate static site using official ROQ action
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching
      
      - name: Debug ROQ Configuration
        run: |
          echo "üîç Debugging ROQ configuration..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Content directory:"
          ls -la content/ || echo "Content directory not found"
          echo "Config directory:"
          ls -la config/ || echo "Config directory not found"
          echo "POM file exists:"
          ls -la pom.xml || echo "POM file not found"
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Generate ROQ Static Site
        uses: quarkiverse/quarkus-roq@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          java-version: '17'
          # Let the action auto-detect the GitHub Pages URL
        continue-on-error: true
      
      - name: Check ROQ Generation
        run: |
          if [ -d "target/site" ]; then
            echo "‚úÖ ROQ static site generated successfully"
            ls -la target/site/
          else
            echo "‚ùå ROQ static site generation failed, trying alternative approach"
            exit 1
          fi
      
      - name: Fallback Static Site Generation
        if: failure()
        run: |
          echo "üîÑ Using fallback static site generation..."
          
          # Build the application first
          ./mvnw clean compile
          
          # Create static site directory
          mkdir -p target/site
          
          # Copy public assets
          cp -r public/* target/site/ 2>/dev/null || echo "No public directory found"
          
          # Copy content files (this will be raw, but at least the site will work)
          cp -r content/* target/site/ 2>/dev/null || echo "No content directory found"
          
          # Create a basic index.html if it doesn't exist
          if [ ! -f "target/site/index.html" ]; then
            echo "Creating fallback index.html..."
            echo '<!DOCTYPE html>' > target/site/index.html
            echo '<html lang="en">' >> target/site/index.html
            echo '<head>' >> target/site/index.html
            echo '    <meta charset="UTF-8">' >> target/site/index.html
            echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> target/site/index.html
            echo '    <title>PeruJUG - Peru Java User Group</title>' >> target/site/index.html
            echo '    <link rel="stylesheet" href="materialize.css">' >> target/site/index.html
            echo '    <link rel="stylesheet" href="main.css">' >> target/site/index.html
            echo '</head>' >> target/site/index.html
            echo '<body>' >> target/site/index.html
            echo '    <div class="container">' >> target/site/index.html
            echo '        <h1>PeruJUG - Peru Java User Group</h1>' >> target/site/index.html
            echo '        <p>Welcome to the Peru Java User Group website!</p>' >> target/site/index.html
            echo '        <p>This site is currently being updated. Please check back soon.</p>' >> target/site/index.html
            echo '    </div>' >> target/site/index.html
            echo '    <script src="js/jquery.min.js"></script>' >> target/site/index.html
            echo '    <script src="js/materialize.min.js"></script>' >> target/site/index.html
            echo '    <script src="init.js"></script>' >> target/site/index.html
            echo '</body>' >> target/site/index.html
            echo '</html>' >> target/site/index.html
          fi
          
          echo "‚úÖ Fallback static site created"
          ls -la target/site/

  # Deploy to GitHub Pages
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './target/site'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Verify deployment
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üì± Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "‚è±Ô∏è Deployment time: ${{ steps.deployment.outputs.deployment_time }}"